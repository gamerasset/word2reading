// Á≠îÈ¢òÈ°µÈù¢ÈÄªËæë

class QuizManager {
    constructor() {
        this.quizData = null;
        this.userAnswers = [];
        this.isSubmitted = false;
        
        this.initializePage();
    }

    initializePage() {
        // ‰ªélocalStorageËé∑ÂèñÈ¢òÁõÆÊï∞ÊçÆ
        this.quizData = loadFromStorage('quizData');
        
        if (!this.quizData) {
            showMessage('Ê≤°ÊúâÊâæÂà∞È¢òÁõÆÊï∞ÊçÆ', 'error');
            setTimeout(() => {
                navigateTo('/');
            }, 2000);
            return;
        }

        console.log('Âä†ËΩΩÈ¢òÁõÆÊï∞ÊçÆ:', this.quizData);
        
        // Ê∏≤ÊüìÈ°µÈù¢ÂÜÖÂÆπ
        this.renderArticle();
        this.renderQuestions();
        this.bindEvents();
    }

    renderArticle() {
        const articleContent = document.getElementById('article-content');
        const levelBadge = document.getElementById('article-level');
        
        if (articleContent && this.quizData.article) {
            articleContent.textContent = this.quizData.article;
        }
        
        if (levelBadge && this.quizData.level) {
            levelBadge.textContent = `ÈöæÂ∫¶: ${this.quizData.level}`;
        }
    }

    renderQuestions() {
        const questionsContainer = document.getElementById('questions-container');
        
        if (!questionsContainer || !this.quizData.questions) {
            return;
        }

        // ÂàùÂßãÂåñÁî®Êà∑Á≠îÊ°àÊï∞ÁªÑ
        this.userAnswers = new Array(this.quizData.questions.length).fill('');

        questionsContainer.innerHTML = this.quizData.questions
            .map((question, index) => this.renderQuestion(question, index))
            .join('');
    }

    renderQuestion(question, index) {
        const questionNumber = index + 1;
        
        return `
            <div class="question-item" data-question="${index}">
                <div class="question-title">
                    ${questionNumber}. ${question.question}
                </div>
                <div class="options">
                    ${Object.entries(question.options)
                        .map(([key, text]) => `
                            <label class="option" data-option="${key}">
                                <input type="radio" name="question_${index}" value="${key}">
                                <span class="option-text">${key}. ${text}</span>
                            </label>
                        `).join('')}
                </div>
                <div class="explanation" id="explanation_${index}">
                    <strong>Ëß£ÊûêÔºö</strong>${question.explanation || 'ÊöÇÊó†Ëß£Êûê'}
                </div>
            </div>
        `;
    }

    bindEvents() {
        // ÁªëÂÆöÈÄâÈ°πÁÇπÂáª‰∫ã‰ª∂
        document.addEventListener('change', (e) => {
            if (e.target.type === 'radio' && e.target.name.startsWith('question_')) {
                this.handleAnswerSelect(e);
            }
        });

        // ÁªëÂÆöÊèê‰∫§ÊåâÈíÆ
        const submitBtn = document.getElementById('submit-btn');
        if (submitBtn) {
            submitBtn.addEventListener('click', () => {
                this.handleSubmit();
            });
        }

        // ÁªëÂÆöÈáçÊñ∞ÂºÄÂßãÊåâÈíÆ
        const restartBtn = document.getElementById('restart-btn');
        if (restartBtn) {
            restartBtn.addEventListener('click', () => {
                this.handleRestart();
            });
        }
    }

    handleAnswerSelect(e) {
        if (this.isSubmitted) return;

        const questionIndex = parseInt(e.target.name.split('_')[1]);
        const selectedOption = e.target.value;
        
        // ‰øùÂ≠òÁî®Êà∑Á≠îÊ°à
        this.userAnswers[questionIndex] = selectedOption;
        
        // Êõ¥Êñ∞ÈóÆÈ¢òÈ°πÊ†∑Âºè
        const questionItem = document.querySelector(`[data-question="${questionIndex}"]`);
        if (questionItem) {
            questionItem.classList.add('answered');
        }
        
        console.log(`ÈóÆÈ¢ò ${questionIndex + 1} ÈÄâÊã©‰∫Ü: ${selectedOption}`);
    }

    handleSubmit() {
        if (this.isSubmitted) return;

        // Ê£ÄÊü•ÊòØÂê¶ÊâÄÊúâÈ¢òÁõÆÈÉΩÂ∑≤ÂõûÁ≠î
        const unansweredCount = this.userAnswers.filter(answer => !answer).length;
        
        if (unansweredCount > 0) {
            const confirmSubmit = confirm(`ËøòÊúâ ${unansweredCount} ÈÅìÈ¢òÊú™ÂõûÁ≠îÔºåÁ°ÆÂÆöË¶ÅÊèê‰∫§ÂêóÔºü`);
            if (!confirmSubmit) {
                return;
            }
        }

        this.isSubmitted = true;
        this.showResults();
    }

    showResults() {
        let correctCount = 0;
        const totalQuestions = this.quizData.questions.length;

        // ÈÅçÂéÜÊØè‰∏™ÈóÆÈ¢òÔºåÊòæÁ§∫ÁªìÊûú
        this.quizData.questions.forEach((question, index) => {
            const userAnswer = this.userAnswers[index];
            const correctAnswer = question.correct_answer;
            const isCorrect = userAnswer === correctAnswer;
            
            if (isCorrect) {
                correctCount++;
            }

            // Êõ¥Êñ∞ÈÄâÈ°πÊ†∑Âºè
            const questionItem = document.querySelector(`[data-question="${index}"]`);
            const options = questionItem.querySelectorAll('.option');
            
            options.forEach(option => {
                const optionKey = option.dataset.option;
                const radio = option.querySelector('input[type="radio"]');
                
                // Á¶ÅÁî®ÊâÄÊúâÈÄâÈ°π
                radio.disabled = true;
                
                if (optionKey === correctAnswer) {
                    // Ê≠£Á°ÆÁ≠îÊ°à
                    option.classList.add('correct');
                } else if (optionKey === userAnswer && userAnswer !== correctAnswer) {
                    // Áî®Êà∑ÈÄâÊã©ÁöÑÈîôËØØÁ≠îÊ°à
                    option.classList.add('incorrect');
                }
            });

            // ÊòæÁ§∫Ëß£Êûê
            const explanation = document.getElementById(`explanation_${index}`);
            if (explanation) {
                explanation.classList.add('show');
            }
        });

        // ÊòæÁ§∫ÂæóÂàÜ
        this.displayScore(correctCount, totalQuestions);
        
        // Êõ¥Êñ∞ÊåâÈíÆ
        const submitBtn = document.getElementById('submit-btn');
        const restartBtn = document.getElementById('restart-btn');
        
        if (submitBtn) submitBtn.style.display = 'none';
        if (restartBtn) restartBtn.style.display = 'inline-block';
    }

    displayScore(correct, total) {
        const resultSummary = document.getElementById('result-summary');
        const scoreEl = document.getElementById('score');
        const totalEl = document.getElementById('total');
        const percentageEl = document.getElementById('percentage');
        
        if (resultSummary) {
            resultSummary.style.display = 'block';
        }
        
        if (scoreEl) scoreEl.textContent = correct;
        if (totalEl) totalEl.textContent = total;
        if (percentageEl) {
            const percentage = Math.round((correct / total) * 100);
            percentageEl.textContent = percentage;
        }

        // ÊòæÁ§∫ÊàêÁª©ÊèêÁ§∫
        const percentage = Math.round((correct / total) * 100);
        let message = '';
        
        if (percentage >= 90) {
            message = 'üéâ ‰ºòÁßÄÔºÅ';
        } else if (percentage >= 80) {
            message = 'üëç ËâØÂ•ΩÔºÅ';
        } else if (percentage >= 60) {
            message = 'üìö ÁªßÁª≠Âä™ÂäõÔºÅ';
        } else {
            message = 'üí™ Âä†Ê≤πÔºÅ';
        }
        
        showMessage(`${message} ÊÇ®Á≠îÂØπ‰∫Ü ${correct}/${total} È¢ò`, 'success');
    }

    handleRestart() {
        // Ê∏ÖÈô§Â≠òÂÇ®ÁöÑÊï∞ÊçÆ
        clearStorage('selectedWords');
        clearStorage('quizData');
        
        // Ë∑≥ËΩ¨Âà∞‰∏ªÈ°µ
        navigateTo('/');
    }
}

// È°µÈù¢Âä†ËΩΩÂÆåÊàêÂêéÂàùÂßãÂåñ
document.addEventListener('DOMContentLoaded', () => {
    new QuizManager();
});